name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.24.x

    - name: Install dependencies (Linux only)
      if: matrix.goos == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y fuse libfuse-dev

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 1
      run: |
        if [ "${{ matrix.goos }}" != "linux" ]; then
          export CGO_ENABLED=0
        fi
        
        BINARY_NAME="offsetfs-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        go build -v -ldflags="-s -w -X main.version=${{ github.ref_name }}" -o "${BINARY_NAME}" .
        
        # Create archive
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip "${BINARY_NAME%.exe}.zip" "${BINARY_NAME}" README.md
        else
          tar -czf "${BINARY_NAME}.tar.gz" "${BINARY_NAME}" README.md
        fi

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          offsetfs-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.zip' || '.tar.gz' }}
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

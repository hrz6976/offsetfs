name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-20.04  # This is intentionally set to an older version for compatibility with the build process
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            cc: gcc
            cgo: 1
          - goos: linux
            goarch: arm64
            cc: aarch64-linux-gnu-gcc
            cgo: 1

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.24.x

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y fuse3 libfuse3-dev
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: ${{ matrix.cgo }}
        CC: ${{ matrix.cc }}
      run: |
        VERSION="${{ github.ref_name }}"
        COMMIT_HASH_SHORT=$(echo "${{ github.sha }}" | cut -c1-7)
        BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        BINARY_NAME="syncmate-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        go build -tags=fuse3 -v -ldflags="-s -w \
          -X 'main.VERSION=${VERSION}' \
          -X 'main.BUILD_TIME=${BUILD_TIME}' \
          -X 'main.COMMIT_HASH=${COMMIT_HASH_SHORT}'" \
          -o "${BINARY_NAME}" .

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          syncmate-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
